quit()
q()
library(dplyr)
library(ggplot2)
library(plotyl)
library(plotlt)
library(plotly)
library(devtools)
sessionInfo()
quit()
updateR()
quit()
library(devtools)
install.packages("devtools")
devtools::install_github("simonscmap/cmap4r/cmap4r")
set_authorization()
library(cmap4r)
set_authorization(cmap_key = "be40a8d2-9e50-4188-9a52-47c395f0e601")
knitr::opts_chunk$set(echo = TRUE)
get_depthprofile(table_name = "tblArgoMerge_REP",
sel_var = "argo_merge_chl_adj",
lat1 = 20, lat2 = 24,
lon1 = -170, lon2 = -150,
dt1 = "2016-04-30", dt2 = "2016-04-30",
depth1 = 0, depth2 = 1500)
get_catalog() %>%
select(Variable, Table_Name, Unit, Sensor, Unit) %>%
head(20) %>%
kable()
library(dplyr)
library(ggplot2)
library(plotly)
library(cmap4r)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
library(cmap4r)
get_catalog() %>%
select(Variable, Table_Name, Unit, Sensor, Unit) %>%
head(20) %>%
kable()
get_catalog() %>%
select(Variable, Table_Name, Unit, Sensor, Unit) %>%
head(20) %>%
table()
library(knitr)
get_catalog() %>%
select(Variable, Table_Name, Unit, Sensor, Unit) %>%
head(20) %>%
kable()  #correct from tutorial (shown as)
get_catalog() %>%
select(Variable, Table_Name, Unit, Sensor, Unit) %>%
head(20) %>%
table()  #kable requires knitr and only works in markdown, otherwise use table?
quit()
quit()
source('~/Dropbox/Current projects/Longnecker_BIOSSCOPE/makeCMAP.R')
source("~/Dropbox/Current projects/Longnecker_BIOSSCOPE/makeCMAP.R")
quit()
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#library(writexl)
library(lubridate)
OS <- .Platform$OS.type
if (OS == "unix"){
# MAC file path - change to what works on your computer
dPath <- "/users/klongnecker/"
} else if (OS == "windows"){
# windows file path - change to what works on your computer
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Longnecker_BIOSSCOPE/"
} else {
#something went wrong...could not determine the operating system
print("ERROR: OS could not be identified")
}
##need the existing discrete file (file is *not* on GitHub, update to your own path)
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
##now read in the dataset template from CMAP: will use that as the base for file with BIOS-SCOPE data
fName <- "tryingCMAP/datasetTemplate.xlsx"
newName <- "tryingCMAP/BIOSSCOPE_data_latest.xlsx"
sheetName <- "data"
cmap <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
#pull the column names from cmap and use to make a new dataframe with what I need
cols <- colnames(cmap)[1:4] #remaining are generic
df <- as.data.frame(matrix(ncol = length(cols), nrow = dim(discrete)[1], dimnames = list(NULL, cols)))
#time --> CMAP requirement is this:
#< Format  %Y-%m-%dT%H:%M:%S,  Time-Zone:  UTC,  example: 2014-02-28T14:25:55 >
#do this in two steps so I can check the output more easily
temp <- discrete %>% mutate(date = date_decimal(decy)) %>% mutate(date_cmap=format(date,"%Y-%m-%dT%H:%M:%S"))
df$time <- temp$date_cmap
#lat (-90 to 90) and lon (-180 to 180)
df$lat <- discrete$latN
df$lon <- -discrete$lonW #note negative to go from W to decimal
df$depth <- discrete$Depth
#all remaining columns can be considered data
discrete_trim <- subset(discrete,select=-c(latN,lonW,Depth))
df <- cbind(df,discrete_trim)
# #before moving on, tidy up and remove this package
detach("package:readxl",unload=TRUE)
library(xlsx)
wb = createWorkbook()
sheet = createSheet(wb, sheetName)
addDataFrame(df, sheet=sheet, startColumn=1, row.names=TRUE)
quit
quit()
#write up a script to convert the BIOS-SCOPE data to the required format for CMAP
# Krista Longnecker, 23 June 2025
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#library(writexl)
library(lubridate)
OS <- .Platform$OS.type
if (OS == "unix"){
# MAC file path - change to what works on your computer
dPath <- "/users/klongnecker/"
} else if (OS == "windows"){
# windows file path - change to what works on your computer
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Longnecker_BIOSSCOPE/"
} else {
#something went wrong...could not determine the operating system
print("ERROR: OS could not be identified")
}
##need the existing discrete file (file is *not* on GitHub, update to your own path)
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
##now read in the dataset template from CMAP: will use that as the base for file with BIOS-SCOPE data
fName <- "tryingCMAP/datasetTemplate.xlsx"
newName <- "tryingCMAP/BIOSSCOPE_data_latest.xlsx"
sheetName <- "data"
cmap <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
#pull the column names from cmap and use to make a new dataframe with what I need
cols <- colnames(cmap)[1:4] #remaining are generic
df <- as.data.frame(matrix(ncol = length(cols), nrow = dim(discrete)[1], dimnames = list(NULL, cols)))
#required variables are time,lat,lon,depth
#time --> CMAP requirement is this:
#< Format  %Y-%m-%dT%H:%M:%S,  Time-Zone:  UTC,  example: 2014-02-28T14:25:55 >
#do this in two steps so I can check the output more easily
temp <- discrete %>% mutate(date = date_decimal(decy)) %>% mutate(date_cmap=format(date,"%Y-%m-%dT%H:%M:%S"))
df$time <- temp$date_cmap
#lat (-90 to 90) and lon (-180 to 180)
df$lat <- discrete$latN
df$lon <- -discrete$lonW #note negative to go from W to decimal
df$depth <- discrete$Depth
#all remaining columns can be considered data
discrete_trim <- subset(discrete,select=-c(latN,lonW,Depth))
df <- cbind(df,discrete_trim)
#now I have the df ready to put into the Excel file that is getting assembled
# #before moving on, tidy up and remove this package
detach("package:readxl",unload=TRUE)
#
# # ### read in the file with openxlsx2 because that will be the easiest way to pull in the existing style
# library(openxlsx2)
#
# wb <- wb_workbook()
# data <- createSheet(wb,sheetName)
# addDataFrame(df,data)
# saveWorkbook(wb,newName)
## this will not work : java heap memory issues (known problem)
options(java.parameters = "-Xmx1000m")
library(xlsx)
wb = createWorkbook()
sheet = createSheet(wb, sheetName)
addDataFrame(df, sheet=sheet, startColumn=1, row.names=TRUE)
quit
quit()
setwd("~/Dropbox/GitHub/data_pipeline/CMAP")
wPage <- 'https://datadocs.bco-dmo.org/file/KAAGNEBc2V61jx/survey_biogeochemical.csv'
data <- read.csv(url(wPage))
View(data)
quit()
