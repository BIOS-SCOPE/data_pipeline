nPath <- "C:/Users/klongnecker/Documents/Dropbox/GitHub/data_pipeline/data_holdingZone/"
#nDatafile <- "sampleDataFile_useAsExampleForYourData.xlsx"
nDatafile <- "nuts got swapped.xlsx"
nSheetName <- "data"
fileType <- 'xlsx' #one of two choices: 'csv' or 'xlsx'
#testing Ellie's columns
existingColumns <- c("PO4(umol/kg","NO3+NO2(umol/kg)")
tempColumns <- c("Phosphate [uM]","Nitrite+Nitrate [uM]")
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
discrete_updated <-as.data.frame(discrete)
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
setwd(nPath)
dir
dir()
#need the file information for the new data file. Note, you must have a variable "New_ID"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
setwd(nPath)
dir()
#need the file information for the new data file. Note, you must have a variable "New_ID"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
nSheetName <- "SUMMARY"
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
View(newDiscreteData)
#next: make sure I don't have duplicate samples (rows), and if I do
#send up a warning, ask if that is expected, and move on to do averaging
#if the answer is yes
uv <- length(unique(newDiscreteData$New_ID))
av <- length(newDiscreteData$New_ID)
if (uv != av) {
warning('Careful, some samples are repeated in here.\n')
x <- readline("Is this expected (type 'yes' or 'no')\n")
if (x=='yes') {
warning('OK, move on')
#group_by by New_ID, can put in multiple columns at once (using tempColumns
#which is defined above), and then take mean, drop the NA
### (or whatever comes in with Carlson lab data)
newDiscreteData <- newDiscreteData %>%
group_by(New_ID) %>%
summarise(across(tempColumns, ~ mean(.x,na.rm=TRUE)))
} else if (x=='no') {
stop('Then you have a problem...go check out the data')
}
}
#now, match up the columns (where the match between the existing bottle file
#new discrete data are given above)
colIdxDiscrete <- which(colnames(discrete_updated) %in% existingColumns)
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
colIdxDiscrete
colIdxNew
View(discrete_updated)
existingColumns
isempty(colIdxNew)
if(length(colIdxNew)==0)
)
rlang::is_empty(colIdxNew)
rlang::is_empty(colIdxDiscrete)
#before moving on, tidy up and remove this package
detach("package:readxl",unload=TRUE)
### read in the file with openxlsx2 because that will be the easiest way to pull in the existing style
library(openxlsx2)
# If I assemble my own workbook, I can save the file that results from Excel
# But will only be one sheet with new data...can paste that into new bottle file
wb <- wb_workbook()
#will put the updated version of discrete here:
wb$add_worksheet("updatedData")
nrow(newDiscreteData)
idx <- 1
one <- newDiscreteData$New_ID[idx]
#figure out which row matches in the discrete file
m <- match(one,discrete_updated$New_ID)
#first, set the existing data to -999 (being cautious)
discrete_updated[m,colIdxDiscrete] <- -999
#now, put in the right variables
discrete_updated[m,colIdxDiscrete] <- newDiscreteData[idx,colIdxNew]
for (idx in 1:nrow(newDiscreteData)) {
one <- newDiscreteData$New_ID[idx]
#figure out which row matches in the discrete file
m <- match(one,discrete_updated$New_ID)
#first, set the existing data to -999 (being cautious)
discrete_updated[m,colIdxDiscrete] <- -999
#now, put in the right variables
discrete_updated[m,colIdxDiscrete] <- newDiscreteData[idx,colIdxNew]
}
#now that I have updated the discrete data, stick it back into the workbook
wb$add_data("updatedData",discrete_updated)
#this next line will open up the file in Excel. Sadly you will still have to copy
#and paste into a new sheet, but at least you can copy the whole sheet
xl_open(wb)
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
warnings()
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
warnings()
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
rm(ls = ls.str())
rm()
rm(list=ls.str())
##need the existing discrete file (file is *not* on GitHub, update to your own path)
# if you are on a Mac, your path will be something like this --> /users/klongnecker
# if you are on a PC, your path will be something like this --> c:/users/klongnecker
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Kuj_BIOSSCOPE/RawData/DataFiles_CTDandDiscreteSamples/"
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
#need the file information for the new data file. Note, you must have a variable "New_ID"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
#nDatafile <- "sampleDataFile_useAsExampleForYourData.xlsx"
nDatafile <- "nuts merge_worked.xlsx"
nSheetName <- "Nuts"
fileType <- 'xlsx' #one of two choices: 'csv' or 'xlsx'
#testing Ellie's columns
existingColumns <- c("NO3+NO2(umol/kg)","NO3+NO2_QF","PO4(umol/kg)","PO4_QF")
tempColumns <- c("Nitrite+Nitrate [umol/kg]","NO3+NO2_QF","Phosphate [umol/kg]","PO4_QF")
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
discrete_updated <-as.data.frame(discrete)
(!is.na(match(fileType,'csv')))
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
colnames(newDiscreteData)
tempColumns
tempColumns <- c("Nitrite+Nitrate [umol/kg","NO3+NO2_QF","Phosphate [umol/kg]","PO4_QF")
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
colIdxNew
tempColumns
tempColumns <- c("Nitrite+Nitrate [umol/kg]","NO3+NO2_QF","Phosphate [umol/kg]","PO4_QF")
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
colIdxNew
newDiscreteData[colIdxNew]
tempColumns <- c("Nitrite+Nitrate  [umol/kg]","NO3+NO2_QF","Phosphate [umol/kg]","PO4_QF")
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
colIdxNew
newDiscreteData[colIdxNew]
length(existingColumns)
length(colIdxDiscrete)
#now, match up the columns (where the match between the existing bottle file
#new discrete data are given above)
colIdxDiscrete <- which(colnames(discrete_updated) %in% existingColumns)
length(colIdxDiscrete)
(length(colIdxDiscrete) != length(existingColumns))
length(colIdxDiscrete)
length(existingColumnes)
length(existingColumns)
(length(colIdxDiscrete) == length(existingColumns))
if (rlang::is_empty(colIdxNew)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}else if(length(colIdxDiscrete) != length(existingColumns))
stop('Matched some columns, but not all of them')
(rlang::is_empty(colIdxNew))
(length(colIdxDiscrete) != length(existingColumns))
if (rlang::is_empty(colIdxNew)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}else if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Matched some columns in the new data file, but not all of them')
}
#start by checking the match to what is in the discrete data file
if (rlang::is_empty(colIdxDiscrete)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}else if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Matched some columns in the new data file, but not all of them')
}
(rlang::is_empty(colIdxNew))
(length(colIdxNew) != length(tempColumns))
#start by checking the match to what is in the discrete data file
if (rlang::is_empty(colIdxDiscrete)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}
#now check, did I find all the matches? (probably could merge with above, but leave so I get a better error message)
if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Note from Krista: Matched some columns in the discrete file, but not all of them')
}
# #what about in the new data file?
if (rlang::is_empty(colIdxNew)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}
#now check, did I find all the matches?
if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Note from Krista: Matched some columns in the incoming/new data file, but not all of them')
}
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
rm(list = ls.str(0))
rm(list = ls.str())
##need the existing discrete file (file is *not* on GitHub, update to your own path)
# if you are on a Mac, your path will be something like this --> /users/klongnecker
# if you are on a PC, your path will be something like this --> c:/users/klongnecker
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Kuj_BIOSSCOPE/RawData/DataFiles_CTDandDiscreteSamples/"
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
#need the file information for the new data file. Note, you must have a variable "New_ID"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
#nDatafile <- "sampleDataFile_useAsExampleForYourData.xlsx"
nDatafile <- "nuts merge_worked.xlsx"
nSheetName <- "Nuts"
fileType <- 'xlsx' #one of two choices: 'csv' or 'xlsx'
#testing Ellie's columns
existingColumns <- c("NO3+NO2(umol/kg)","NO3+NO2_QF","PO4(umol/kg)","PO4_QF")
tempColumns <- c("Nitrite+Nitrate  [umol/kg]","NO3+NO2_QF","Phosphate [umol/kg]","PO4_QF")
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
discrete_updated <-as.data.frame(discrete)
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
#next: make sure I don't have duplicate samples (rows), and if I do
#send up a warning, ask if that is expected, and move on to do averaging
#if the answer is yes
uv <- length(unique(newDiscreteData$New_ID))
av <- length(newDiscreteData$New_ID)
if (uv != av) {
warning('Careful, some samples are repeated in here.\n')
x <- readline("Is this expected (type 'yes' or 'no')\n")
if (x=='yes') {
warning('OK, move on')
#group_by by New_ID, can put in multiple columns at once (using tempColumns
#which is defined above), and then take mean, drop the NA
### (or whatever comes in with Carlson lab data)
newDiscreteData <- newDiscreteData %>%
group_by(New_ID) %>%
summarise(across(tempColumns, ~ mean(.x,na.rm=TRUE)))
} else if (x=='no') {
stop('Then you have a problem...go check out the data')
}
}
#now, match up the columns (where the match between the existing bottle file
#new discrete data are given above)
colIdxDiscrete <- which(colnames(discrete_updated) %in% existingColumns)
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
#start by checking if there is any match at all
if (rlang::is_empty(colIdxDiscrete)) {
stop('Note from Krista: No matching column found in discrete file; something is wrong')
}
#now check, did I find all the matches? (probably could merge with above, but leave so I get a better error message)
if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Note from Krista: Matched some columns in the discrete file, but not all of them')
}
# #what about in the new data file?
if (rlang::is_empty(colIdxNew)) {
stop('Note from Krista: No matching column found in incoming/new dataset; something is wrong')
}
#now check, did I find all the matches?
if (length(colIdxDiscrete) != length(existingColumns)) {
stop('Note from Krista: Matched some columns in the incoming/new data file, but not all of them')
}
#before moving on, tidy up and remove this package
detach("package:readxl",unload=TRUE)
### read in the file with openxlsx2 because that will be the easiest way to pull in the existing style
library(openxlsx2)
# If I assemble my own workbook, I can save the file that results from Excel
# But will only be one sheet with new data...can paste that into new bottle file
wb <- wb_workbook()
#will put the updated version of discrete here:
wb$add_worksheet("updatedData")
for (idx in 1:nrow(newDiscreteData)) {
one <- newDiscreteData$New_ID[idx]
#figure out which row matches in the discrete file
m <- match(one,discrete_updated$New_ID)
#first, set the existing data to -999 (being cautious)
discrete_updated[m,colIdxDiscrete] <- -999
#now, put in the right variables
discrete_updated[m,colIdxDiscrete] <- newDiscreteData[idx,colIdxNew]
}
one
m
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
colIdxDiscrete
existingColumns
colnames(discrete_updated)
warning('Your columns names should match something on this list')
colnames(discrete_updated)
warning('Instead you have this' existingColumns)
dbquit
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
help(cat)
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
print(colnames(discrete_updated))
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
rm(list = ls.str90)
rm(list = ls.str())
##need the existing discrete file (file is *not* on GitHub, update to your own path)
# if you are on a Mac, your path will be something like this --> /users/klongnecker
# if you are on a PC, your path will be something like this --> c:/users/klongnecker
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Kuj_BIOSSCOPE/RawData/DataFiles_CTDandDiscreteSamples/"
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
#need the file information for the new data file. Note, you must have a variable "New_ID"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
nDatafile <- "sampleDataFile_useAsExampleForYourData.xlsx"
nSheetName <- "data"
fileType <- 'xlsx' #one of two choices: 'csv' or 'xlsx'
# #will accumulate lots of these, so comment them out and add to the list as needed
# #Shimadzu data from Ellie 1/24/2024
existingColumns <- c("DOC (umol/kg)","DOC_QF")
tempColumns <- c("DOC [UMOL/KG]x","DOC_FLAG_W")
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
discrete_updated <-as.data.frame(discrete)
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
#next: make sure I don't have duplicate samples (rows), and if I do
#send up a warning, ask if that is expected, and move on to do averaging
#if the answer is yes
uv <- length(unique(newDiscreteData$New_ID))
av <- length(newDiscreteData$New_ID)
if (uv != av) {
warning('Careful, some samples are repeated in here.\n')
x <- readline("Is this expected (type 'yes' or 'no')\n")
if (x=='yes') {
warning('OK, move on')
#group_by by New_ID, can put in multiple columns at once (using tempColumns
#which is defined above), and then take mean, drop the NA
### (or whatever comes in with Carlson lab data)
newDiscreteData <- newDiscreteData %>%
group_by(New_ID) %>%
summarise(across(tempColumns, ~ mean(.x,na.rm=TRUE)))
} else if (x=='no') {
stop('Then you have a problem...go check out the data')
}
}
#now, match up the columns (where the match between the existing bottle file
#new discrete data are given above)
colIdxDiscrete <- which(colnames(discrete_updated) %in% existingColumns)
colIdxNew <- which(colnames(newDiscreteData) %in% tempColumns)
tempColumns
colIdxNew
(rlang::is_empty(colIdxNew))
(length(colIdxDiscrete) != length(existingColumns))
length(colIdxDiscrete)
length(existingColumns)
(length(colIdxNew) != length(existingColumns))
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
rm(list = ls.str())
##need the existing discrete file (file is *not* on GitHub, update to your own path)
# if you are on a Mac, your path will be something like this --> /users/klongnecker
# if you are on a PC, your path will be something like this --> c:/users/klongnecker
dPath <- "C:/Users/klongnecker/Documents/Dropbox/Current projects/Kuj_BIOSSCOPE/RawData/DataFiles_CTDandDiscreteSamples/"
#read in the master file - this is an Excel file
fName <- "BATS_BS_COMBINED_MASTER_latest.xlsx"
nPath <- "C:/Users/klongnecker/Documents/GitHub/data_pipeline/data_holdingZone/"
nDatafile <- "nuts got swapped.xlsx"
nSheetName <- "SUMMARY"
fileType <- 'xlsx' #one of two choices: 'csv' or 'xlsx'
existingColumns <- c("PO4","PO4_QF")
tempColumns <- c("PO4(umol/kg)","FLAG_Phosphate")
library(dplyr)
#there are multiple options for reading/writing Excel files, and because of the formatting, I need two choices
library(readxl) #use this to read in the master file
#read in the existing bottle file (using values from above)
sheetName <- "DATA" #(was "BATS_BS bottle file")
#definitely want suppressWarnings here to prevent one error message for each row
discrete <- suppressWarnings(read_excel(paste0(dPath,fName),
sheet = sheetName,
guess_max=Inf))
discrete_updated <-as.data.frame(discrete)
#now read in the new discrete data file, could be xlsx or csv based on values from above
if (!is.na(match(fileType,'csv'))) {
#use this version to read in data in a CSV format
newDiscreteData <- read.csv(paste0(nPath,nDatafile))
} else if (!is.na(match(fileType,'xlsx'))) {
#use this version when the data are in xlsx
#and read in the new discrete data file (again, values are as above)
newDiscreteData <- suppressWarnings(read_excel(paste0(nPath,nDatafile),
sheet = nSheetName,
guess_max=Inf))
newDiscreteData <-as.data.frame(newDiscreteData)
}
View(newDiscreteData)
colnames(newDiscreteData)
colnames(newDiscreteData)[1]
colnames(newDiscreteData)[1] != "New_ID"
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
help(step)
help(stop)
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
any(colnames(newDiscreteData))=="New_ID"
help(any)
colnames(newDiscreteData)
any(colnames(newDiscreteData),"New_ID")
which(colnames(newDiscreteData),"New_ID")
class(colnames(newDiscreteData))
colnames(newDiscreteData)=="New_ID"
(colnames(newDiscreteData) != "New_ID")
any((colnames(newDiscreteData) != "New_ID"))
any((colnames(newDiscreteData) == "New_ID"))
any((colnames(newDiscreteData) == "New_IDss"))
any((colnames(newDiscreteData) == "New_ID"))
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
colnames(newDiscreteData)
colnames(newDiscreteData) == "New_ID"
any(colnames(newDiscreteData) == "New_ID")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
debugSource("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
colnames(newDiscreteData)
colnames(newDiscreteData) == "New_ID"
any(colnames(newDiscreteData) == "New_ID")
colnames(newDiscreteData) != "New_ID")
colnames(newDiscreteData) != "New_ID"
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
source("~/GitHub/data_pipeline/R_code/Join_discreteData_v3.R")
quit()
